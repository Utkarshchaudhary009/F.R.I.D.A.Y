import webbrowser
import subprocess
import shutil
import re

def website(url):
    # Determine if Chrome is available
    chrome_path = shutil.which("chrome") or shutil.which("google-chrome")
    if chrome_path:
        subprocess.run([chrome_path, url])
    else:
        webbrowser.open(url)
   # Predefined web map
web_map = {
    "google": "https://www.google.com",
    "youtube": "https://www.youtube.com",
    "facebook": "https://www.facebook.com",
    "twitter": "https://twitter.com",
    "instagram": "https://www.instagram.com",
    "reddit": "https://www.reddit.com",
    "linkedin": "https://www.linkedin.com",
    "amazon": "https://www.amazon.com",
    "ebay": "https://www.ebay.com",
    "wikipedia": "https://www.wikipedia.org",
    "stackoverflow": "https://stackoverflow.com",
    "github": "https://github.com",
    "yahoo": "https://www.yahoo.com",
    "bing": "https://www.bing.com",
    "pinterest": "https://www.pinterest.com",
    "netflix": "https://www.netflix.com",
    "spotify": "https://www.spotify.com",
    "apple": "https://www.apple.com",
    "microsoft": "https://www.microsoft.com",
    "walmart": "https://www.walmart.com",
    "target": "https://www.target.com",
    "hulu": "https://www.hulu.com",
    "craigslist": "https://www.craigslist.org",
    "imdb": "https://www.imdb.com",
    "nytimes": "https://www.nytimes.com",
    "bbc": "https://www.bbc.co.uk",
    "cnn": "https://www.cnn.com",
    "forbes": "https://www.forbes.com",
    "weather": "https://www.weather.com",
    "reddit": "https://www.reddit.com",
    "Adobe Premiere Pro Forums": "https://community.adobe.com/t5/premiere-pro/bd-p/premiere-pro?page=1&sort=latest_replies&filter=all",
    "Final Cut Pro Forums": "https://discussions.apple.com/community/professional_applications/final_cut_pro_x",
    "Avid Media Composer Forums": "https://community.avid.com/forums/default.aspx",
    "DaVinci Resolve Forums": "https://forum.blackmagicdesign.com/viewforum.php?f=21",
    "VideoCopilot (After Effects Tutorials)": "https://www.videocopilot.net",
    "Red Giant (Video Editing Plugins)": "https://www.redgiant.com",
    "B&H Photo Video (Video Equipment)": "https://www.bhphotovideo.com",
    "Sports Illustrated": "https://www.si.com",
    "ESPN": "https://www.espn.com",
    "NBA": "https://www.nba.com",
    "NFL": "https://www.nfl.com",
    "MLB": "https://www.mlb.com",
    "NHL": "https://www.nhl.com",
    "FIFA": "https://www.fifa.com",
    "UFC": "https://www.ufc.com",
    "PGA Tour": "https://www.pgatour.com",
    "Olympics": "https://olympics.com",
    "Tennis.com": "https://www.tennis.com",
    "Runner's World": "https://www.runnersworld.com",
    "Cyclingnews": "https://www.cyclingnews.com",
    "Golf Digest": "https://www.golfdigest.com",
    "Bleacher Report": "https://bleacherreport.com",
    "CBS Sports": "https://www.cbssports.com",
    "NBC Sports": "https://www.nbcsports.com",
    "FOX Sports": "https://www.foxsports.com",
    "BBC Sport": "https://www.bbc.co.uk/sport",
    "ESPNcricinfo": "https://www.espncricinfo.com",
    "Sportsnet": "https://www.sportsnet.ca",
    "The Athletic": "https://theathletic.com",
    "World Surf League": "https://www.worldsurfleague.com",
    "Formula 1": "https://www.formula1.com",
    "MotoGP": "https://www.motogp.com",
    "Red Bull Racing": "https://www.redbull.com/int-en/team/red-bull-racing",
    "WWE": "https://www.wwe.com",
    "NASCAR": "https://www.nascar.com",
    "Athletics Weekly": "https://www.athleticsweekly.com",
    "GitHub": "https://github.com",
    "Stack Overflow": "https://stackoverflow.com",
    "Medium (Programming)": "https://medium.com/topic/programming",
    "Dev.to": "https://dev.to",
    "Hacker News": "https://news.ycombinator.com",
    "Codecademy": "https://www.codecademy.com",
    "GeeksforGeeks": "https://www.geeksforgeeks.org",
    "LeetCode": "https://leetcode.com",
    "Hackerrank": "https://www.hackerrank.com",
    "FreeCodeCamp": "https://www.freecodecamp.org",
    "Mozilla Developer Network (MDN)": "https://developer.mozilla.org",
    "W3Schools": "https://www.w3schools.com",
    "The New Boston (Tutorials)": "https://thenewboston.com",
    "CodePen": "https://codepen.io",
    "The Odin Project": "https://www.theodinproject.com",
    "Coursera (Computer Science)": "https://www.coursera.org/browse/computer-science",
    "Udemy (Programming Courses)": "https://www.udemy.com/courses/development/",
    "Pluralsight": "https://www.pluralsight.com",
    "Code.org": "https://code.org",
    "Kaggle": "https://www.kaggle.com",
    "CodeProject": "https://www.codeproject.com",
    "CodersRank": "https://profile.codersrank.io",
    "Topcoder": "https://www.topcoder.com",
    "The Code Player": "https://thecodeplayer.com",
    "CSS-Tricks": "https://css-tricks.com",
    "DZone": "https://dzone.com",
    "Programiz": "https://www.programiz.com",
    "Tuts+": "https://tutsplus.com",
    "Reddit Programming": "https://www.reddit.com/r/programming",
    "CodeNewbie": "https://www.codenewbie.org",
    "Google Classroom": "https://classroom.google.com",
    "Khan Academy": "https://www.khanacademy.org",
    "EdX": "https://www.edx.org",
    "Coursera": "https://www.coursera.org",
    "Quizlet": "https://quizlet.com",
    "Scholastic": "https://www.scholastic.com",
    "TED-Ed": "https://ed.ted.com",
    "PBS LearningMedia": "https://www.pbslearningmedia.org",
    "Teachers Pay Teachers": "https://www.teacherspayteachers.com",
    "BBC Bitesize": "https://www.bbc.co.uk/bitesize",
    "National Geographic Kids": "https://kids.nationalgeographic.com",
    "Duolingo": "https://www.duolingo.com",
    "HippoCampus": "https://www.hippocampus.org",
    "IXL": "https://www.ixl.com",
    "Study.com": "https://www.study.com",
    "Mathway": "https://www.mathway.com",
    "SparkNotes": "https://www.sparknotes.com",
    "CliffsNotes": "https://www.cliffsnotes.com",
    "Math Playground": "https://www.mathplayground.com",
    "Reading Eggs": "https://readingeggs.com",
    "Cool Math": "https://www.coolmath.com",
    "Grammarly": "https://www.grammarly.com",
    "History.com": "https://www.history.com",
    "ReadWriteThink": "https://www.readwritethink.org",
    "Smithsonian Education": "https://www.smithsonianeducation.org",
    "NASA Kids' Club": "https://www.nasa.gov/kidsclub",
    "Discovery Education": "https://www.discoveryeducation.com",
    "IXL Learning": "https://www.ixl.com",
    "Mathletics": "https://www.mathletics.com",
    "Brainscape": "https://www.brainscape.com",
    "Netflix": "https://www.netflix.com",
    "Hulu": "https://www.hulu.com",
    "Disney+": "https://www.disneyplus.com",
    "Amazon Prime Video": "https://www.amazon.com/Prime-Video",
    "HBO Max": "https://www.hbomax.com",
    "YouTube": "https://www.youtube.com",
    "Twitch": "https://www.twitch.tv",
    "Reddit": "https://www.reddit.com",
    "IMDb": "https://www.imdb.com",
    "Rotten Tomatoes": "https://www.rottentomatoes.com",
    "Spotify": "https://www.spotify.com",
    "Apple Music": "https://music.apple.com",
    "SoundCloud": "https://soundcloud.com",
    "Pandora": "https://www.pandora.com",
    "Last.fm": "https://www.last.fm",
    "Tidal": "https://tidal.com",
    "Deezer": "https://www.deezer.com",
    "Google Play Music": "https://play.google.com/music",
    "Audible": "https://www.audible.com",
    "Goodreads": "https://www.goodreads.com",
    "Wattpad": "https://www.wattpad.com",
    "Kindle Store": "https://www.amazon.com/Kindle-eBooks",
    "Etsy": "https://www.etsy.com",
    "Pinterest": "https://www.pinterest.com",
    "Instagram": "https://www.instagram.com",
    "Snapchat": "https://www.snapchat.com",
    "TikTok": "https://www.tiktok.com",
    "Twitter": "https://twitter.com",
    "Facebook": "https://www.facebook.com",
    "Vimeo": "https://vimeo.com",
    "Microsoft": "https://www.microsoft.com",
    "Microsoft Store": "https://www.microsoft.com/en-us/store/b/home",
    "Microsoft 365": "https://www.microsoft.com/en-us/microsoft-365",
    "Microsoft Office": "https://www.microsoft.com/en-us/microsoft-365/get-started-with-office-2019",
    "Windows": "https://www.microsoft.com/en-us/windows",
    "Windows Update": "https://support.microsoft.com/en-us/help/12373/windows-update-faq",
    "Microsoft Edge": "https://www.microsoft.com/en-us/edge",
    "Visual Studio": "https://visualstudio.microsoft.com",
    "Azure": "https://azure.microsoft.com",
    "Xbox": "https://www.xbox.com",
    "Xbox Game Pass": "https://www.xbox.com/en-US/xbox-game-pass",
    "Microsoft Developer Network (MSDN)": "https://developer.microsoft.com/en-us",
    "GitHub (owned by Microsoft)": "https://github.com",
    "Microsoft Tech Community": "https://techcommunity.microsoft.com",
    "Microsoft News": "https://news.microsoft.com",
    "Microsoft Support": "https://support.microsoft.com",
    "Microsoft Research": "https://www.microsoft.com/en-us/research",
    "Microsoft Learn": "https://learn.microsoft.com",
    "Microsoft Teams": "https://www.microsoft.com/en-us/microsoft-365/microsoft-teams/group-chat-software",
    "Bing": "https://www.bing.com",
    "Microsoft OneDrive": "https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage",
    "Microsoft Power BI": "https://powerbi.microsoft.com",
    "Microsoft Dynamics 365": "https://dynamics.microsoft.com",
    "Microsoft News Center": "https://news.microsoft.com",
    "Microsoft Security Intelligence": "https://www.microsoft.com/security/blog",
    "Microsoft Investor Relations": "https://www.microsoft.com/en-us/investor",
    "Microsoft Accessibility": "https://www.microsoft.com/en-us/accessibility",
    "Microsoft Garage": "https://www.microsoft.com/en-us/garage",
    "Microsoft AI": "https://www.microsoft.com/en-us/ai"
}
    
def find_query(url):
    # Remove common extensions and protocols
    filtered_name = re.sub(r'(https?://|www\.|\.com|\.in|\.xyz)', '', url)
    
 
    
    if filtered_name in web_map:
        return {"url": web_map[filtered_name], "name": filtered_name}
    else:
        # If not found, create a URL with https and .com
        return {"url": f"https://{filtered_name}.com", "name": filtered_name}

def open_website(arguments):
    url = arguments.get("url")
    if not url:
        return {"response": "Please specify a URL to open."}
    
    query_result = find_query(url)
    website(query_result["url"])
    return {"response": f"Opening {query_result['name']} in browser."}

if __name__=="__main__":
    # Examples of using the functions
    print(open_website({"url": "wekipedia"}))  # Should open Google and print "Opening google in browser."
    print(open_website({"url": "github"})) # Should open Python and print "Opening python in browser."
    # print(open_website({"url": "unknownsite.com"})) # Should create a URL "https://unknownsite.com" and open it.
